/* auto-generated by NAPI-RS */
/* eslint-disable */
/**
 * Wraps an http::HeaderMap instance to expose it to JavaScript.
 *
 * It provides methods to access and modify HTTP headers, iterate over them,
 * and convert them to a JSON object representation.
 */
export declare class Headers {
  /**
   * Create a new Headers instance.
   *
   * # Examples
   *
   * ```js
   * const headers = new Headers({
   *   'Content-Type': 'application/json',
   *   'Accept': ['text/html', 'application/json']
   * });
   *
   * console.log(headers.get('Content-Type')); // application/json
   * for (const mime of headers.getAll('Accept')) {
   *   console.log(mime); // text/html, application/json
   * }
   * ```
   */
  constructor(options?: HeaderMap | undefined | null)
  /**
   * Get the last set value for a given header key.
   *
   * # Examples
   *
   * ```js
   * const headers = new Headers();
   * headers.set('Accept', 'application/json');
   * headers.set('Accept', 'text/html');
   *
   * console.log(headers.get('Accept')); // text/html
   * ```
   */
  get(key: string): string | null
  /**
   * Get all values for a given header key.
   *
   * # Examples
   *
   * ```js
   * const headers = new Headers();
   * headers.set('Accept', 'application/json');
   * headers.set('Accept', 'text/html');
   *
   * for (const mime of headers.getAll('Accept')) {
   *   console.log(mime);
   * }
   * ```
   */
  getAll(key: string): Array<string>
  /**
   * Get all values for a given header key as a comma-separated string.
   *
   * This is useful for headers that can have multiple values, such as `Accept`.
   * But note that some headers like `Set-Cookie`, expect separate lines.
   *
   * # Examples
   *
   * ```js
   * const headers = new Headers();
   * headers.set('Accept', 'application/json');
   * headers.set('Accept', 'text/html');
   *
   * console.log(headers.getLine('Accept')); // application/json,text/html
   * ```
   */
  getLine(key: string): string | null
  /**
   * Clear all header entries.
   *
   * # Examples
   *
   * ```js
   * const headers = new Headers();
   * headers.set('Content-Type', 'application/json');
   * headers.set('Accept', 'application/json');
   * headers.clear();
   *
   * console.log(headers.has('Content-Type')); // false
   * console.log(headers.has('Accept')); // false
   * ```
   */
  clear(): void
  /**
   * Check if a header key exists.
   *
   * # Examples
   *
   * ```js
   * const headers = new Headers();
   * headers.set('Content-Type', 'application/json');
   *
   * console.log(headers.has('Content-Type')); // true
   * console.log(headers.has('Accept')); // false
   * ```
   */
  has(key: string): boolean
  /**
   * Set a header key/value pair.
   *
   * # Examples
   *
   * ```js
   * const headers = new Headers();
   * headers.set('Content-Type', 'application/json');
   * ```
   */
  set(key: string, value: HeaderMapValue): boolean
  /**
   * Add a value to a header key.
   *
   * # Examples
   *
   * ```js
   * const headers = new Headers();
   * headers.set('Accept', 'application/json');
   * headers.add('Accept', 'text/html');
   *
   * console.log(headers.get('Accept')); // application/json, text/html
   * ```
   */
  add(key: string, value: string): boolean
  /**
   * Delete a header key/value pair.
   *
   * # Examples
   *
   * ```js
   * const headers = new Headers();
   * headers.set('Content-Type', 'application/json');
   * headers.delete('Content-Type');
   * ```
   */
  delete(key: string): boolean
  /**
   * Get the number of header entries.
   *
   * # Examples
   *
   * ```js
   * const headers = new Headers();
   * headers.set('Content-Type', 'application/json');
   * headers.set('Accept', 'application/json');
   *
   * console.log(headers.size); // 2
   * ```
   */
  get size(): number
  /**
   * Get an iterator over the header entries.
   *
   * # Examples
   *
   * ```js
   * const headers = new Headers();
   * headers.set('Content-Type', 'application/json');
   * headers.set('Accept', 'application/json');
   *
   * for (const [name, value] of headers.entries()) {
   *   console.log(`${name}: ${value}`);
   * }
   * ```
   */
  entries(): Array<[string, string]>
  /**
   * Get an iterator over the header keys.
   *
   * # Examples
   *
   * ```js
   * const headers = new Headers();
   * headers.set('Content-Type', 'application/json');
   * headers.set('Accept', 'application/json');
   *
   * for (const name of headers.keys()) {
   *   console.log(name);
   * }
   * ```
   */
  keys(): Array<string>
  /**
   * Get an iterator over the header values.
   *
   * # Examples
   *
   * ```js
   * const headers = new Headers();
   * headers.set('Content-Type', 'application/json');
   * headers.set('Accept', 'application/json');
   *
   * for (const value of headers.values()) {
   *   console.log(value);
   * }
   * ```
   */
  values(): Array<string>
  /**
   * Execute a callback for each header entry.
   *
   * # Examples
   *
   * ```js
   * const headers = new Headers();
   * headers.set('Content-Type', 'application/json');
   * headers.set('Accept', 'application/json');
   *
   * headers.forEach((value, name, headers) => {
   *   console.log(`${name}: ${value}`);
   * });
   * ```
   */
  forEach(this: this, callback: (arg0: string, arg1: string, arg2: this) => void): void
  /**
   * Convert the headers to a JSON object representation.
   *
   * # Examples
   *
   * ```js
   * const headers = new Headers({
   *   'Content-Type': 'application/json',
   *   'Accept': ['text/html', 'application/json']
   * });
   *
   * console.log(headers.toJSON());
   * ```
   */
  toJSON(): object
}

/**
 * Wraps an http::Request instance to expose it to JavaScript.
 *
 * It provides methods to access the HTTP method, URI, headers, and body of
 * the request along with a toJSON method to convert it to a JSON object.
 */
export declare class Request {
  /**
   * Create a new Request from a Request instance.
   *
   * # Examples
   *
   * ```js
   * const request = new Request({
   *   method: 'GET',
   *   url: 'http://example.com',
   *   headers: {
   *     'Accept': ['application/json', 'text/html']
   *   },
   *   body: Buffer.from(JSON.stringify({
   *     message: 'Hello, world!'
   *   })),
   * });
   * ```
   */
  constructor(options?: RequestOptions | undefined | null)
  /**
   * Get the HTTP method for the request.
   *
   * # Examples
   *
   * ```js
   * const request = new Request({
   *   method: "GET",
   *   url: "/index.php"
   * });
   *
   * console.log(request.method); // GET
   * ```
   */
  get method(): string
  /**
   * Set the HTTP method for the request.
   *
   * # Examples
   *
   * ```js
   * const request = new Request({
   *  url: "/index.php"
   * });
   *
   * request.method = "POST";
   * console.log(request.method); // POST
   * ```
   */
  set method(method: string)
  /**
   * Get the full URL for the request, including scheme and authority.
   *
   * # Examples
   *
   * ```js
   * const request = new Request({
   *   url: "https://example.com/index.php"
   * });
   *
   * console.log(request.url); // https://example.com/index.php
   * ```
   */
  get url(): string
  /**
   * Set the URL for the request.
   *
   * # Examples
   *
   * ```js
   * const request = new Request({
   *  url: "https://example.com/index.php"
   * });
   *
   * request.url = "https://example.com/new-url";
   * console.log(request.url); // https://example.com/new-url
   * ```
   */
  set url(url: string)
  /**
   * Get the path portion of the URL for the request.
   *
   * # Examples
   *
   * ```js
   * const request = new Request({
   *   url: "https://example.com/api/users?id=123"
   * });
   *
   * console.log(request.path); // /api/users
   * ```
   */
  get path(): string
  /**
   * Get the headers for the request.
   *
   * # Examples
   *
   * ```js
   * const request = new Request({
   *   url: "/index.php",
   *   headers: {
   *     'Content-Type': ['application/json']
   *   }
   * });
   *
   * for (const mime of request.headers.getAll('Content-Type')) {
   *   console.log(mime); // application/json
   * }
   * ```
   */
  get headers(): Headers
  /**
   * Set the headers for the request.
   *
   * # Examples
   *
   * ```js
   * const request = new Request({
   *  url: "/index.php"
   * });
   *
   * request.headers = new Headers({
   *  'Content-Type': ['application/json']
   * });
   *
   * for (const mime of request.headers.getAll('Content-Type')) {
   *  console.log(mime); // application/json
   * }
   * ```
   */
  set headers(headers: Headers)
  /**
   * Get the document root for the request, if applicable.
   *
   * # Examples
   *
   * ```js
   * const request = new Request({
   *   url: "/index.php",
   *   docroot: "/var/www/html"
   * });
   *
   * console.log(request.docroot); // /var/www/html
   * ```
   */
  get docroot(): string | null
  /**
   * Set the document root for the request.
   *
   * # Examples
   *
   * ```js
   * const request = new Request({
   *  url: "/index.php"
   * });
   *
   * request.docroot = "/var/www/html";
   * console.log(request.docroot); // /var/www/html
   * ```
   */
  set docroot(docroot: string)
  /**
   * Get the body of the request as a Buffer.
   *
   * # Examples
   *
   * ```js
   * const request = new Request({
   *   url: "/v2/api/thing",
   *   body: Buffer.from(JSON.stringify({
   *     message: 'Hello, world!'
   *   }))
   * });
   *
   * console.log(request.body.toString()); // {"message":"Hello, world!"}
   * ```
   */
  get body(): Buffer
  /**
   * Set the body of the request.
   *
   * # Examples
   *
   * ```js
   * const request = new Request({
   *  url: "/v2/api/thing"
   * });
   *
   * request.body = Buffer.from(JSON.stringify({
   *   message: 'Hello, world!'
   * }));
   *
   * console.log(request.body.toString()); // {"message":"Hello, world!"}
   * ```
   */
  set body(body: Buffer)
  /**
   * Convert the response to a JSON object representation.
   *
   * # Examples
   *
   * ```js
   * const request = new Request({
   *   method: "GET",
   *   url: "https://example.com/index.php",
   *   headers: {
   *     'Content-Type': ['application/json']
   *   },
   *   body: Buffer.from(JSON.stringify({
   *     message: 'Hello, world!'
   *   }))
   * });
   *
   * console.log(request.toJSON());
   * ```
   */
  toJSON(): object
}

/**
 * Wraps an http::Response instance to expose it to JavaScript.
 *
 * It provides methods to access the status code, headers, and body of the
 * response along with a toJSON method to convert it to a JSON object.
 *
 * # Examples
 *
 * ```js
 * const response = new Response({
 *   status: 200,
 *   headers: {
 *     'Content-Type': ['application/json']
 *   },
 *   body: Buffer.from(JSON.stringify({
 *     message: 'Hello, world!'
 *   }))
 * });
 *
 * console.log(response.status); // 200
 * for (const mime of response.headers.getAll('Content-Type')) {
 *   console.log(mime); // application/json
 * }
 * console.log(response.body.toString()); // {"message":"Hello, world!"}
 * ```
 */
export declare class Response {
  /**
   * Create a new Response from a Response instance.
   *
   * # Examples
   *
   * ```js
   * const response = new Response({
   *   status: 200,
   *   headers: {
   *     'Content-Type': ['application/json']
   *   },
   *   body: Buffer.from(JSON.stringify({ message: 'Hello, world!' }))
   * });
   * ```
   */
  constructor(options?: ResponseOptions | undefined | null)
  /**
   * Get the HTTP status code for the response.
   *
   * # Examples
   *
   * ```js
   * const response = new Response({
   *   status: 200,
   *   headers: {
   *     'Content-Type': ['application/json']
   *   },
   *   body: Buffer.from(JSON.stringify({
   *     message: 'Hello, world!'
   *   }))
   * });
   *
   * console.log(response.status); // 200
   * ```
   */
  get status(): number
  /**
   * Set the HTTP status code for the response.
   *
   * # Examples
   *
   * ```js
   * const response = new Response();
   *
   * response.status = 404;
   * console.log(response.status); // 404
   * ```
   */
  set status(status: number)
  /**
   * Get the headers for the response.
   *
   * # Examples
   *
   * ```js
   * const response = new Response({
   *   headers: {
   *     'Content-Type': ['application/json']
   *   },
   *   body: Buffer.from(JSON.stringify({
   *     message: 'Hello, world!'
   *   }))
   * });
   *
   * for (const mime of response.headers.get('Content-Type')) {
   *   console.log(mime); // application/json
   * }
   * ```
   */
  get headers(): Headers
  /**
   * Set the headers for the response.
   *
   * # Examples
   *
   * ```js
   * const response = new Response();
   *
   * response.headers = new Headers({
   *  'Content-Type': ['application/json']
   * });
   *
   * for (const mime of response.headers.getAll('Content-Type')) {
   *  console.log(mime); // application/json
   * }
   * ```
   */
  set headers(headers: Headers)
  /**
   * Get the body of the response as a Buffer.
   *
   * # Examples
   *
   * ```js
   * const response = new Response({
   *   body: Buffer.from(JSON.stringify({
   *     message: 'Hello, world!'
   *   }))
   * });
   *
   * console.log(response.body.toString()); // {"message":"Hello, world!"}
   * ```
   */
  get body(): Buffer
  /**
   * Set the body of the response.
   *
   * # Examples
   *
   * ```js
   * const response = new Response();
   *
   * response.body = Buffer.from(JSON.stringify({
   *   message: 'Hello, world!'
   * }));
   *
   * console.log(response.body.toString()); // {"message":"Hello, world!"}
   * ```
   */
  set body(body: Buffer)
  /**
   * Get the log of the response as a Buffer.
   *
   * # Examples
   *
   * ```js
   * const response = new Response({
   *   log: Buffer.from('Log message')
   * });
   *
   * console.log(response.log.toString()); // Log message
   * ```
   */
  get log(): Buffer
  /**
   * Get the exception of the response.
   *
   * # Examples
   *
   * ```js
   * const response = new Response({
   *   exception: 'Error message'
   * });
   *
   * console.log(response.exception); // Error message
   * ```
   */
  get exception(): string | null
  /**
   * Convert the response to a JSON object representation.
   *
   * # Examples
   *
   * ```js
   * const response = new Response({
   *   status: 200,
   *   headers: {
   *     'Content-Type': ['application/json']
   *   },
   *   body: Buffer.from(JSON.stringify({
   *     message: 'Hello, world!'
   *   }))
   * });
   *
   * console.log(response.toJSON());
   * ```
   */
  toJSON(): object
}

/** A multi-map of HTTP headers. Any given header key can have multiple values. */
export type HeaderMap =
  Record<string, HeaderMapValue>

/** A header entry value, which can be either a string or array of strings. */
export type HeaderMapValue =
  string | Array<string>

/** Input options for creating a Request. */
export interface RequestOptions {
  /** The HTTP method for the request. */
  method?: string
  /** The URL for the request. */
  url: string
  /** The headers for the request. */
  headers?: Headers | HeaderMap
  /** The body for the request. */
  body?: Buffer
  /** The socket information for the request. */
  socket?: SocketInfo
  /** Document root for the request, if applicable. */
  docroot?: string
}

/** Input options for creating a Response. */
export interface ResponseOptions {
  /** The HTTP method for the request. */
  status?: number
  /** The headers for the request. */
  headers?: Headers | HeaderMap
  /** The body for the request. */
  body?: Buffer
  /** The log output for the request. */
  log?: Buffer
  /** The exception output for the request. */
  exception?: string
}

/** Input options for creating a SocketInfo. */
export interface SocketInfo {
  /** The string representation of the local IP address the remote client is connecting on. */
  localAddress: string
  /** The numeric representation of the local port. For example, 80 or 21. */
  localPort: number
  /** The string representation of the local IP family, e.g., "IPv4" or "IPv6". */
  localFamily: string
  /** The string representation of the remote IP address. */
  remoteAddress: string
  /** The numeric representation of the remote port. For example, 80 or 21. */
  remotePort: number
  /** The string representation of the remote IP family, e.g., "IPv4" or "IPv6". */
  remoteFamily: string
}
/** A N-API wrapper for the `ConditionalRewriter` type. */
export declare class ConditionalRewriter {
  /**
   * Rewrite the given request if the condition matches.
   *
   * # Examples
   *
   * ```js
   * const rewritten = rewriter.rewrite(request);
   * ```
   */
  rewrite(request: Request): Request
  /**
   * Chain this rewriter with another, creating a sequence that applies both in order
   *
   * # Examples
   *
   * ```js
   * const sequence = rewriter1.then(rewriter2);
   * ```
   */
  then(other: AnyRewriter): SequenceRewriter
  /**
   * Apply this rewriter conditionally based on a condition
   *
   * # Examples
   *
   * ```js
   * const conditional = rewriter.when(condition);
   * ```
   */
  when(condition: AnyCondition): ConditionalRewriter
}

/** A N-API wrapper for the `ExistenceCondition` type. */
export declare class ExistenceCondition {
  /**
   * Create a new existence condition.
   *
   * # Examples
   *
   * ```js
   * const condition = new ExistenceCondition();
   * ```
   */
  constructor()
  /**
   * Check if the given request matches the condition.
   *
   * # Examples
   *
   * ```js
   * const matches = condition.matches(request);
   * ```
   */
  matches(request: Request): boolean
  /**
   * Create a new condition that matches when both conditions match
   *
   * # Examples
   *
   * ```js
   * const combined = condition1.and(condition2);
   * ```
   */
  and(other: AnyCondition): GroupCondition
  /**
   * Create a new condition that matches when either condition matches
   *
   * # Examples
   *
   * ```js
   * const combined = condition1.or(condition2);
   * ```
   */
  or(other: AnyCondition): GroupCondition
}

/** A N-API wrapper for the `GroupCondition` type. */
export declare class GroupCondition {
  /**
   * Check if the given request matches the group condition.
   *
   * # Examples
   *
   * ```js
   * const matches = condition.matches(request);
   * ```
   */
  matches(request: Request): boolean
  /**
   * Create a new condition that matches when both conditions match
   *
   * # Examples
   *
   * ```js
   * const combined = condition1.and(condition2);
   * ```
   */
  and(other: AnyCondition): GroupCondition
  /**
   * Create a new condition that matches when either condition matches
   *
   * # Examples
   *
   * ```js
   * const combined = condition1.or(condition2);
   * ```
   */
  or(other: AnyCondition): GroupCondition
}

/** A N-API wrapper for the `HeaderCondition` type. */
export declare class HeaderCondition {
  /**
   * Create a new header condition.
   *
   * # Examples
   *
   * ```js
   * const condition = new HeaderCondition('Content-Type', 'application/json');
   * ```
   */
  constructor(header: string, value: string)
  /**
   * Check if the given request matches the condition.
   *
   * # Examples
   *
   * ```js
   * const matches = condition.matches(request);
   * ```
   */
  matches(request: Request): boolean
  /**
   * Create a new condition that matches when both conditions match
   *
   * # Examples
   *
   * ```js
   * const combined = condition1.and(condition2);
   * ```
   */
  and(other: AnyCondition): GroupCondition
  /**
   * Create a new condition that matches when either condition matches
   *
   * # Examples
   *
   * ```js
   * const combined = condition1.or(condition2);
   * ```
   */
  or(other: AnyCondition): GroupCondition
}

/** A N-API wrapper for the `HeaderRewriter` type. */
export declare class HeaderRewriter {
  /**
   * Create a new header rewriter.
   *
   * # Examples
   *
   * ```js
   * const rewriter = new HeaderRewriter();
   * ```
   */
  constructor(header: string, pattern: string, replacement: string)
  /**
   * Rewrite the given request headers.
   *
   * # Examples
   *
   * ```js
   * const rewritten = rewriter.rewrite(request);
   * ```
   */
  rewrite(request: Request): Request
  /**
   * Chain this rewriter with another, creating a sequence that applies both in order
   *
   * # Examples
   *
   * ```js
   * const sequence = rewriter1.then(rewriter2);
   * ```
   */
  then(other: AnyRewriter): SequenceRewriter
  /**
   * Apply this rewriter conditionally based on a condition
   *
   * # Examples
   *
   * ```js
   * const conditional = rewriter.when(condition);
   * ```
   */
  when(condition: AnyCondition): ConditionalRewriter
}

/** A N-API wrapper for the `HrefRewriter` type. */
export declare class HrefRewriter {
  /**
   * Create a new href rewriter.
   *
   * # Examples
   *
   * ```js
   * const rewriter = new HrefRewriter('^http://', 'https://');
   * ```
   */
  constructor(pattern: string, replacement: string)
  /**
   * Rewrite the given request href.
   *
   * # Examples
   *
   * ```js
   * const rewritten = rewriter.rewrite(request);
   * ```
   */
  rewrite(request: Request): Request
  /**
   * Chain this rewriter with another, creating a sequence that applies both in order
   *
   * # Examples
   *
   * ```js
   * const sequence = rewriter1.then(rewriter2);
   * ```
   */
  then(other: AnyRewriter): SequenceRewriter
  /**
   * Apply this rewriter conditionally based on a condition
   *
   * # Examples
   *
   * ```js
   * const conditional = rewriter.when(condition);
   * ```
   */
  when(condition: AnyCondition): ConditionalRewriter
}

/** A N-API wrapper for the `MethodCondition` type. */
export declare class MethodCondition {
  /**
   * Create a new method condition.
   *
   * # Examples
   *
   * ```js
   * const condition = new MethodCondition('GET');
   * ```
   */
  constructor(method: string)
  /**
   * Check if the given request matches the condition.
   *
   * # Examples
   *
   * ```js
   * const matches = condition.matches(request);
   * ```
   */
  matches(request: Request): boolean
  /**
   * Create a new condition that matches when both conditions match
   *
   * # Examples
   *
   * ```js
   * const combined = condition1.and(condition2);
   * ```
   */
  and(other: AnyCondition): GroupCondition
  /**
   * Create a new condition that matches when either condition matches
   *
   * # Examples
   *
   * ```js
   * const combined = condition1.or(condition2);
   * ```
   */
  or(other: AnyCondition): GroupCondition
}

/** A N-API wrapper for the `MethodRewriter` type. */
export declare class MethodRewriter {
  /**
   * Create a new method rewriter.
   *
   * # Examples
   *
   * ```js
   * const rewriter = new MethodRewriter();
   * ```
   */
  constructor(method: string)
  /**
   * Rewrite the given request method.
   *
   * # Examples
   *
   * ```js
   * const rewritten = rewriter.rewrite(request);
   * ```
   */
  rewrite(request: Request): Request
  /**
   * Chain this rewriter with another, creating a sequence that applies both in order
   *
   * # Examples
   *
   * ```js
   * const sequence = rewriter1.then(rewriter2);
   * ```
   */
  then(other: AnyRewriter): SequenceRewriter
  /**
   * Apply this rewriter conditionally based on a condition
   *
   * # Examples
   *
   * ```js
   * const conditional = rewriter.when(condition);
   * ```
   */
  when(condition: AnyCondition): ConditionalRewriter
}

/** A N-API wrapper for the `NonExistenceCondition` type. */
export declare class NonExistenceCondition {
  /**
   * Create a new non-existence condition.
   *
   * # Examples
   *
   * ```js
   * const condition = new NonExistenceCondition();
   * ```
   */
  constructor()
  /**
   * Check if the given request matches the condition.
   *
   * # Examples
   *
   * ```js
   * const matches = condition.matches(request);
   * ```
   */
  matches(request: Request): boolean
  /**
   * Create a new condition that matches when both conditions match
   *
   * # Examples
   *
   * ```js
   * const combined = condition1.and(condition2);
   * ```
   */
  and(other: AnyCondition): GroupCondition
  /**
   * Create a new condition that matches when either condition matches
   *
   * # Examples
   *
   * ```js
   * const combined = condition1.or(condition2);
   * ```
   */
  or(other: AnyCondition): GroupCondition
}

/** A N-API wrapper for the `PathCondition` type. */
export declare class PathCondition {
  /**
   * Create a new path condition.
   *
   * # Examples
   *
   * ```js
   * const condition = new PathCondition('/path/to/resource');
   * ```
   */
  constructor(pattern: string)
  /**
   * Check if the given request matches the condition.
   *
   * # Examples
   *
   * ```js
   * const matches = condition.matches(request);
   * ```
   */
  matches(request: Request): boolean
  /**
   * Create a new condition that matches when both conditions match
   *
   * # Examples
   *
   * ```js
   * const combined = condition1.and(condition2);
   * ```
   */
  and(other: AnyCondition): GroupCondition
  /**
   * Create a new condition that matches when either condition matches
   *
   * # Examples
   *
   * ```js
   * const combined = condition1.or(condition2);
   * ```
   */
  or(other: AnyCondition): GroupCondition
}

/** A N-API wrapper for the `PathRewriter` type. */
export declare class PathRewriter {
  /**
   * Create a new path rewriter.
   *
   * # Examples
   *
   * ```js
   * const rewriter = new PathRewriter();
   * ```
   */
  constructor(pattern: string, replacement: string)
  /**
   * Rewrite the given path.
   *
   * # Examples
   *
   * ```js
   * const rewritten = rewriter.rewrite('/path/to/resource');
   * ```
   */
  rewrite(request: Request): Request
  /**
   * Chain this rewriter with another, creating a sequence that applies both in order
   *
   * # Examples
   *
   * ```js
   * const sequence = rewriter1.then(rewriter2);
   * ```
   */
  then(other: AnyRewriter): SequenceRewriter
  /**
   * Apply this rewriter conditionally based on a condition
   *
   * # Examples
   *
   * ```js
   * const conditional = rewriter.when(condition);
   * ```
   */
  when(condition: AnyCondition): ConditionalRewriter
}

/** Allows constructing rewriter and condition configurations from JSON. */
export declare class Rewriter {
  /**
   * Create a new rewriter from a list of configurations.
   *
   * # Examples
   *
   * ```js
   * const rewriter = new Rewriter([
   *   {
   *     operation: 'And',
   *     conditions: [
   *       { type: 'Path', args: ['/old-path'] },
   *       { type: 'Method', args: ['GET'] }
   *     ],
   *     rewriters: [
   *       { type: 'Path', args: ['/new-path'] }
   *     ]
   *   },
   *   {
   *     conditions: [
   *       { type: 'Path', args: ['/api/*'] }
   *     ],
   *     rewriters: [
   *       { type: 'Header', args: ['X-API-Version', '2'] }
   *     ]
   *   }
   * ]);
   * ```
   */
  constructor(configs: Array<ConditionalRewriterConfig>)
  /**
   * Rewrite the given request using the configured rewriter.
   *
   * # Examples
   *
   * ```js
   * const rewritten = rewriter.rewrite(request);
   * ```
   */
  rewrite(request: Request): Request
}

/** A N-API wrapper for the `SequenceRewriter` type. */
export declare class SequenceRewriter {
  /**
   * Rewrite the given request using the sequence of rewriters.
   *
   * # Examples
   *
   * ```js
   * const rewritten = rewriter.rewrite(request);
   * ```
   */
  rewrite(request: Request): Request
  /**
   * Chain this rewriter with another, creating a sequence that applies both in order
   *
   * # Examples
   *
   * ```js
   * const sequence = rewriter1.then(rewriter2);
   * ```
   */
  then(other: AnyRewriter): SequenceRewriter
  /**
   * Apply this rewriter conditionally based on a condition
   *
   * # Examples
   *
   * ```js
   * const conditional = rewriter.when(condition);
   * ```
   */
  when(condition: AnyCondition): ConditionalRewriter
}

/** Configuration for a conditional rewriter that can be used in a `Rewriter`. */
export interface ConditionalRewriterConfig {
  /** The logical operation to use when applying the condition set */
  operation?: ConditionOperation
  /** The conditions that must be met for the rewriters to be applied */
  conditions?: Array<ConditionConfig>
  /** The rewriters to apply if the conditions are met */
  rewriters: Array<RewriterConfig>
}

/** Configuration for a condition that can be used in a `ConditionalRewriterConfig`. */
export interface ConditionConfig {
  /** The type of condition to apply */
  type: ConditionType
  /** The arguments for the condition, such as the path or header name */
  args?: Array<string>
}

/** Describe if a conmdition set is combined with AND or OR logic */
export declare const enum ConditionOperation {
  /** All conditions must match for the rewriters to be applied */
  And = 'and',
  /** At least one condition must match for the rewriters to be applied */
  Or = 'or'
}

/** The types of conditions which may be used in a `ConditionConfig`. */
export declare const enum ConditionType {
  /** Matches based on the request path */
  Path = 'path',
  /** Matches based on the request header */
  Header = 'header',
  /** Matches based on the request method */
  Method = 'method',
  /** Matches if a file exists at the given path */
  Exists = 'exists',
  /** Matches if a file does not exist at the given path */
  NotExists = 'not_exists'
}

/** Configuration for a rewriter that can be used in a `ConditionalRewriterConfig`. */
export interface RewriterConfig {
  /** The type of rewriter to apply */
  type: RewriterType
  /** The arguments for the rewriter, such as the pattern and replacement */
  args?: Array<string>
}

/** The types of rewriters which may be used in a `RewriterConfig`. */
export declare const enum RewriterType {
  /** Rewrites the request path */
  Path = 'path',
  /** Rewrites a request header */
  Header = 'header',
  /** Rewrites the request method */
  Method = 'method',
  /** Rewrites the request href */
  Href = 'href'
}
/**
 * A PHP instance.
 *
 * # Examples
 *
 * ```js
 * const php = new Php({
 *  code: 'echo "Hello, world!";'
 * });
 *
 * const response = php.handleRequest(new Request({
 *   method: 'GET',
 *   url: 'http://example.com'
 * }));
 *
 * console.log(response.status);
 * console.log(response.body);
 * ```
 */
export declare class Php {
  /**
   * Create a new PHP instance.
   *
   * # Examples
   *
   * ```js
   * const php = new Php({
   *   docroot: process.cwd(),
   *   argv: process.argv
   * });
   * ```
   */
  constructor(options?: PhpOptions | undefined | null)
  /**
   * Handle a PHP request.
   *
   * # Examples
   *
   * ```js
   * const php = new Php({
   *   docroot: process.cwd(),
   *   argv: process.argv
   * });
   *
   * const response = php.handleRequest(new Request({
   *   method: 'GET',
   *   url: 'http://example.com'
   * }));
   *
   * console.log(response.status);
   * console.log(response.body);
   * ```
   */
  handleRequest(request: PhpRequest, signal?: AbortSignal | undefined | null): Promise<unknown>
  /**
   * Handle a PHP request synchronously.
   *
   * # Examples
   *
   * ```js
   * const php = new Php({
   *   docroot: process.cwd(),
   *   argv: process.argv
   * });
   *
   * const response = php.handleRequestSync(new Request({
   *   method: 'GET',
   *   url: 'http://example.com'
   * }));
   *
   * console.log(response.status);
   * console.log(response.body);
   * ```
   */
  handleRequestSync(request: PhpRequest): PhpResponse
}
export type PhpRuntime = Php

/** Options for creating a new PHP instance. */
export interface PhpOptions {
  /** The command-line arguments for the PHP instance. */
  argv?: Array<string>
  /** The document root for the PHP instance. */
  docroot?: string
  /** Throw request errors */
  throwRequestErrors?: boolean
  /** Request rewriter */
  rewriter?: NapiRewriter
}
