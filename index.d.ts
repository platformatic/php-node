/* tslint:disable */
/* eslint-disable */

/* auto-generated by NAPI-RS */

/** Options for creating a new PHP instance. */
export interface PhpOptions {
  /** The command-line arguments for the PHP instance. */
  argv?: Array<string>
  /** The PHP code to embed. */
  code: string
  /** The filename for the PHP code. */
  file?: string
}
/** Options for creating a new PHP request. */
export interface PhpRequestOptions {
  /** The HTTP method for the request. */
  method: string
  /** The URL for the request. */
  url: string
  /** The headers for the request. */
  headers?: Record<string, Array<string>>
  /** The body for the request. */
  body?: Uint8Array
}
/** Options for creating a new PHP response. */
export interface PhpResponseOptions {
  /** The HTTP status code for the response. */
  status: number
  /** The headers for the response. */
  headers?: Record<string, Array<string>>
  /** The body for the response. */
  body?: Uint8Array
  /** The log for the response. */
  log?: Uint8Array
  /** The exception for the response. */
  exception?: string
}
export type PhpHeaders = Headers
/**
 * A multi-map of HTTP headers.
 *
 * # Examples
 *
 * ```js
 * const headers = new Headers();
 * headers.set('Content-Type', 'application/json');
 * const contentType = headers.get('Content-Type');
 * ```
 */
export declare class Headers {
  /**
   * Create a new PHP headers instance.
   *
   * # Examples
   *
   * ```js
   * const headers = new Headers();
   * ```
   */
  constructor()
  /**
   * Get the values for a given header key.
   *
   * # Examples
   *
   * ```js
   * const headers = new Headers();
   * headers.set('Accept', 'application/json');
   * headers.set('Accept', 'text/html');
   *
   * for (const mime of headers.get('Accept')) {
   *   console.log(mime);
   * }
   * ```
   */
  get(key: string): Array<string> | null
  /**
   * Set a header key/value pair.
   *
   * # Examples
   *
   * ```js
   * const headers = new Headers();
   * headers.set('Content-Type', 'application/json');
   * ```
   */
  set(key: string, value: string): void
  /**
   * Remove a header key/value pair.
   *
   * # Examples
   *
   * ```js
   * const headers = new Headers();
   * headers.set('Content-Type', 'application/json');
   * headers.remove('Content-Type');
   * ```
   */
  remove(key: string): void
  /**
   * Get an iterator over the header entries.
   *
   * # Examples
   *
   * ```js
   * const headers = new Headers();
   * headers.set('Content-Type', 'application/json');
   * headers.set('Accept', 'application/json');
   *
   * for (const [key, values] of headers.entries()) {
   *   console.log(`${key}: ${values.join(', ')}`);
   * }
   * ```
   */
  entries(): Array<Entry>
  /**
   * Get an iterator over the header keys.
   *
   * # Examples
   *
   * ```js
   * const headers = new Headers();
   * headers.set('Content-Type', 'application/json');
   * headers.set('Accept', 'application/json');
   *
   * for (const key of headers.keys()) {
   *   console.log(key);
   * }
   * ```
   */
  keys(): Array<string>
  /**
   * Get an iterator over the header values.
   *
   * # Examples
   *
   * ```js
   * const headers = new Headers();
   * headers.set('Content-Type', 'application/json');
   * headers.set('Accept', 'application/json');
   *
   * for (const value of headers.values()) {
   *   console.log(value);
   * }
   * ```
   */
  values(): Array<string>
}
export type PhpRuntime = Php
/**
 * A PHP instance.
 *
 * # Examples
 *
 * ```js
 * const php = new Php({
 *  code: 'echo "Hello, world!";'
 * });
 *
 * const response = php.handleRequest(new Request({
 *   method: 'GET',
 *   url: 'http://example.com'
 * }));
 *
 * console.log(response.status);
 * console.log(response.body);
 * ```
 */
export declare class Php {
  /**
   * Create a new PHP instance.
   *
   * # Examples
   *
   * ```js
   * const php = new Php({
   *   code: 'echo "Hello, world!";'
   * });
   * ```
   */
  constructor(options: PhpOptions)
  /**
   * Handle a PHP request.
   *
   * # Examples
   *
   * ```js
   * const php = new Php({
   *  code: 'echo "Hello, world!";'
   * });
   *
   * const response = php.handleRequest(new Request({
   *   method: 'GET',
   *   url: 'http://example.com'
   * }));
   *
   * console.log(response.status);
   * console.log(response.body);
   * ```
   */
  handleRequest(request: PhpRequest): Promise<unknown>
  /**
   * Handle a PHP request synchronously.
   *
   * # Examples
   *
   * ```js
   * const php = new Php({
   *   code: 'echo "Hello, world!";'
   * });
   *
   * const response = php.handleRequestSync(new Request({
   *   method: 'GET',
   *   url: 'http://example.com'
   * }));
   *
   * console.log(response.status);
   * console.log(response.body);
   * ```
   */
  handleRequestSync(request: PhpRequest): PhpResponse
}
export type PhpRequest = Request
/**
 * A PHP request.
 *
 * # Examples
 *
 * ```js
 * const request = new Request({
 *   method: 'GET',
 *   url: 'http://example.com',
 *   headers: {
 *    'Content-Type': ['application/json']
 *   },
 *   body: new Uint8Array([1, 2, 3, 4])
 * });
 * ```
 */
export declare class Request {
  /**
   * Create a new PHP request.
   *
   * # Examples
   *
   * ```js
   * const request = new Request({
   *   method: 'GET',
   *   url: 'http://example.com',
   *   headers: {
   *     'Content-Type': ['application/json']
   *   },
   *   body: new Uint8Array([1, 2, 3, 4])
   * });
   * ```
   */
  constructor(options: PhpRequestOptions)
  /**
   * Get the HTTP method for the request.
   *
   * # Examples
   *
   * ```js
   * const request = new Request({
   *   method: 'GET'
   * });
   *
   * console.log(request.method);
   * ```
   */
  get method(): string
  /**
   * Get the URL for the request.
   *
   * # Examples
   *
   * ```js
   * const request = new Request({
   *   url: 'http://example.com'
   * });
   *
   * console.log(request.url);
   * ```
   */
  get url(): string
  /**
   * Get the headers for the request.
   *
   * # Examples
   *
   * ```js
   * const request = new Request({
   *   headers: {
   *     'Accept': ['application/json', 'text/html']
   *   }
   * });
   *
   * for (const mime of request.headers.get('Accept')) {
   *   console.log(mime);
   * }
   * ```
   */
  get headers(): Headers
  /**
   * Get the body for the request.
   *
   * # Examples
   *
   * ```js
   * const request = new Request({
   *   body: new Uint8Array([1, 2, 3, 4])
   * });
   *
   * console.log(request.body);
   * ```
   */
  get body(): Buffer
}
export type PhpResponse = Response
/** A PHP response. */
export declare class Response {
  /**
   * Create a new PHP response.
   *
   * # Examples
   *
   * ```js
   * const response = new Response({
   *   status: 200,
   *   headers: {
   *     'Content-Type': ['application/json']
   *   },
   *   body: new Uint8Array([1, 2, 3, 4])
   * });
   * ```
   */
  constructor(options: PhpResponseOptions)
  /**
   * Get the HTTP status code for the response.
   *
   * # Examples
   *
   * ```js
   * const response = new Response({
   *   status: 200
   * });
   *
   * console.log(response.status);
   * ```
   */
  get status(): number
  /**
   * Get the headers for the response.
   *
   * # Examples
   *
   * ```js
   * const response = new Response({
   *   headers: {
   *     'Content-Type': ['application/json']
   *   }
   * });
   *
   * for (const mime of response.headers.get('Content-Type')) {
   *   console.log(mime);
   * }
   * ```
   */
  get headers(): Headers
  /**
   * Get the body for the response.
   *
   * # Examples
   *
   * ```js
   * const response = new Response({
   *   body: new Uint8Array([1, 2, 3, 4])
   * });
   *
   * console.log(response.body);
   * ```
   */
  get body(): Buffer
  /**
   * Get the log for the response.
   *
   * # Examples
   *
   * ```js
   * const response = new Response({
   *   log: new Uint8Array([1, 2, 3, 4])
   * });
   *
   * console.log(response.log);
   * ```
   */
  get log(): Buffer
  /**
   * Get the exception for the response.
   *
   * # Examples
   *
   * ```js
   * const response = new Response({
   *   exception: 'An error occurred'
   * });
   *
   * console.log(response.exception);
   * ```
   */
  get exception(): string | null
}
