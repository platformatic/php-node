/* auto-generated by NAPI-RS */
/* eslint-disable */
/**
 * A multi-map of HTTP headers.
 *
 * # Examples
 *
 * ```js
 * const headers = new Headers();
 * headers.set('Content-Type', 'application/json');
 * const contentType = headers.get('Content-Type');
 * ```
 */
export declare class Headers {
  /**
   * Create a new PHP headers instance.
   *
   * # Examples
   *
   * ```js
   * const headers = new Headers();
   * ```
   */
  constructor(headers?: Headers | undefined | null)
  /**
   * Get the last set value for a given header key.
   *
   * # Examples
   *
   * ```js
   * const headers = new Headers();
   * headers.set('Accept', 'application/json');
   * headers.set('Accept', 'text/html');
   *
   * console.log(headers.get('Accept')); // text/html
   * ```
   */
  get(key: string): string | null
  /**
   * Get all values for a given header key.
   *
   * # Examples
   *
   * ```js
   * const headers = new Headers();
   * headers.set('Accept', 'application/json');
   * headers.set('Accept', 'text/html');
   *
   * for (const mime of headers.getAll('Accept')) {
   *   console.log(mime);
   * }
   * ```
   */
  getAll(key: string): Array<string>
  /**
   * Get all values for a given header key as a comma-separated string.
   *
   * This is useful for headers that can have multiple values, such as `Accept`.
   * But note that some headers like `Set-Cookie`, expect separate lines.
   *
   * # Examples
   *
   * ```js
   * const headers = new Headers();
   * headers.set('Accept', 'application/json');
   * headers.set('Accept', 'text/html');
   *
   * console.log(headers.getLine('Accept')); // application/json, text/html
   * ```
   */
  getLine(key: string): string | null
  /**
   * Check if a header key exists.
   *
   * # Examples
   *
   * ```js
   * const headers = new Headers();
   * headers.set('Content-Type', 'application/json');
   *
   * console.log(headers.has('Content-Type')); // true
   * console.log(headers.has('Accept')); // false
   * ```
   */
  has(key: string): boolean
  /**
   * Set a header key/value pair.
   *
   * # Examples
   *
   * ```js
   * const headers = new Headers();
   * headers.set('Content-Type', 'application/json');
   * ```
   */
  set(key: string, value: string): void
  /**
   * Add a value to a header key.
   *
   * # Examples
   *
   * ```js
   * const headers = new Headers();
   * headers.set('Accept', 'application/json');
   * headers.add('Accept', 'text/html');
   *
   * console.log(headers.get('Accept')); // application/json, text/html
   * ```
   */
  add(key: string, value: string): void
  /**
   * Delete a header key/value pair.
   *
   * # Examples
   *
   * ```js
   * const headers = new Headers();
   * headers.set('Content-Type', 'application/json');
   * headers.delete('Content-Type');
   * ```
   */
  delete(key: string): void
  /**
   * Clear all header entries.
   *
   * # Examples
   *
   * ```js
   * const headers = new Headers();
   * headers.set('Content-Type', 'application/json');
   * headers.set('Accept', 'application/json');
   * headers.clear();
   *
   * console.log(headers.has('Content-Type')); // false
   * console.log(headers.has('Accept')); // false
   * ```
   */
  clear(): void
  /**
   * Get the number of header entries.
   *
   * # Examples
   *
   * ```js
   * const headers = new Headers();
   * headers.set('Content-Type', 'application/json');
   * headers.set('Accept', 'application/json');
   *
   * console.log(headers.size); // 2
   * ```
   */
  get size(): number
  /**
   * Get an iterator over the header entries.
   *
   * # Examples
   *
   * ```js
   * const headers = new Headers();
   * headers.set('Content-Type', 'application/json');
   * headers.set('Accept', 'application/json');
   *
   * for (const [name, value] of headers.entries()) {
   *   console.log(`${name}: ${value}`);
   * }
   * ```
   */
  entries(): Array<Entry<string, string>>
  /**
   * Get an iterator over the header keys.
   *
   * # Examples
   *
   * ```js
   * const headers = new Headers();
   * headers.set('Content-Type', 'application/json');
   * headers.set('Accept', 'application/json');
   *
   * for (const name of headers.keys()) {
   *   console.log(name);
   * }
   * ```
   */
  keys(): Array<string>
  /**
   * Get an iterator over the header values.
   *
   * # Examples
   *
   * ```js
   * const headers = new Headers();
   * headers.set('Content-Type', 'application/json');
   * headers.set('Accept', 'application/json');
   *
   * for (const value of headers.values()) {
   *   console.log(value);
   * }
   * ```
   */
  values(): Array<string>
  /**
   * Execute a callback for each header entry.
   *
   * # Examples
   *
   * ```js
   * const headers = new Headers();
   * headers.set('Content-Type', 'application/json');
   * headers.set('Accept', 'application/json');
   *
   * headers.forEach((value, name, headers) => {
   *   console.log(`${name}: ${value}`);
   * });
   * ```
   */
  forEach(this: this, callback: (arg0: string, arg1: string, arg2: this) => void): void
}
export type PhpHeaders = Headers

/**
 * A PHP instance.
 *
 * # Examples
 *
 * ```js
 * const php = new Php({
 *  code: 'echo "Hello, world!";'
 * });
 *
 * const response = php.handleRequest(new Request({
 *   method: 'GET',
 *   url: 'http://example.com'
 * }));
 *
 * console.log(response.status);
 * console.log(response.body);
 * ```
 */
export declare class Php {
  /**
   * Create a new PHP instance.
   *
   * # Examples
   *
   * ```js
   * const php = new Php({
   *   docroot: process.cwd(),
   *   argv: process.argv
   * });
   * ```
   */
  constructor(options?: PhpOptions | undefined | null)
  /**
   * Handle a PHP request.
   *
   * # Examples
   *
   * ```js
   * const php = new Php({
   *   docroot: process.cwd(),
   *   argv: process.argv
   * });
   *
   * const response = php.handleRequest(new Request({
   *   method: 'GET',
   *   url: 'http://example.com'
   * }));
   *
   * console.log(response.status);
   * console.log(response.body);
   * ```
   */
  handleRequest(request: Request, signal?: AbortSignal | undefined | null): Promise<unknown>
  /**
   * Handle a PHP request synchronously.
   *
   * # Examples
   *
   * ```js
   * const php = new Php({
   *   docroot: process.cwd(),
   *   argv: process.argv
   * });
   *
   * const response = php.handleRequestSync(new Request({
   *   method: 'GET',
   *   url: 'http://example.com'
   * }));
   *
   * console.log(response.status);
   * console.log(response.body);
   * ```
   */
  handleRequestSync(request: Request): Response
}
export type PhpRuntime = Php

/**
 * A PHP request.
 *
 * # Examples
 *
 * ```js
 * const request = new Request({
 *   method: 'GET',
 *   url: 'http://example.com',
 *   headers: {
 *    'Content-Type': ['application/json']
 *   },
 *   body: new Uint8Array([1, 2, 3, 4])
 * });
 * ```
 */
export declare class Request {
  /**
   * Create a new PHP request.
   *
   * # Examples
   *
   * ```js
   * const request = new Request({
   *   method: 'GET',
   *   url: 'http://example.com',
   *   headers: {
   *     'Content-Type': ['application/json']
   *   },
   *   body: new Uint8Array([1, 2, 3, 4])
   * });
   * ```
   */
  constructor(options: PhpRequestOptions)
  /**
   * Get the HTTP method for the request.
   *
   * # Examples
   *
   * ```js
   * const request = new Request({
   *   method: 'GET'
   * });
   *
   * console.log(request.method);
   * ```
   */
  get method(): string
  /**
   * Get the URL for the request.
   *
   * # Examples
   *
   * ```js
   * const request = new Request({
   *   url: 'http://example.com'
   * });
   *
   * console.log(request.url);
   * ```
   */
  get url(): string
  /**
   * Get the headers for the request.
   *
   * # Examples
   *
   * ```js
   * const request = new Request({
   *   headers: {
   *     'Accept': ['application/json', 'text/html']
   *   }
   * });
   *
   * for (const mime of request.headers.get('Accept')) {
   *   console.log(mime);
   * }
   * ```
   */
  get headers(): Headers
  /**
   * Get the body for the request.
   *
   * # Examples
   *
   * ```js
   * const request = new Request({
   *   body: new Uint8Array([1, 2, 3, 4])
   * });
   *
   * console.log(request.body);
   * ```
   */
  get body(): Buffer
}
export type PhpRequest = Request

/** A PHP response. */
export declare class Response {
  /**
   * Create a new PHP response.
   *
   * # Examples
   *
   * ```js
   * const response = new Response({
   *   status: 200,
   *   headers: {
   *     'Content-Type': ['application/json']
   *   },
   *   body: new Uint8Array([1, 2, 3, 4])
   * });
   * ```
   */
  constructor(options?: PhpResponseOptions | undefined | null)
  /**
   * Get the HTTP status code for the response.
   *
   * # Examples
   *
   * ```js
   * const response = new Response({
   *   status: 200
   * });
   *
   * console.log(response.status);
   * ```
   */
  get status(): number
  /**
   * Get the headers for the response.
   *
   * # Examples
   *
   * ```js
   * const response = new Response({
   *   headers: {
   *     'Content-Type': ['application/json']
   *   }
   * });
   *
   * for (const mime of response.headers.get('Content-Type')) {
   *   console.log(mime);
   * }
   * ```
   */
  get headers(): Headers
  /**
   * Get the body for the response.
   *
   * # Examples
   *
   * ```js
   * const response = new Response({
   *   body: new Uint8Array([1, 2, 3, 4])
   * });
   *
   * console.log(response.body);
   * ```
   */
  get body(): Buffer
  /**
   * Get the log for the response.
   *
   * # Examples
   *
   * ```js
   * const response = new Response({
   *   log: new Uint8Array([1, 2, 3, 4])
   * });
   *
   * console.log(response.log);
   * ```
   */
  get log(): Buffer
  /**
   * Get the exception for the response.
   *
   * # Examples
   *
   * ```js
   * const response = new Response({
   *   exception: 'An error occurred'
   * });
   *
   * console.log(response.exception);
   * ```
   */
  get exception(): string | null
}
export type PhpResponse = Response

export declare class Rewriter {
  constructor(options: Array<PhpConditionalRewriterOptions>)
  rewrite(request: Request, docroot: string): Request
}
export type PhpRewriter = Rewriter

export interface PhpConditionalRewriterOptions {
  operation?: string
  conditions?: Array<PhpRewriteCondOptions>
  rewriters: Array<PhpRewriterOptions>
}

/** Options for creating a new PHP instance. */
export interface PhpOptions {
  /** The command-line arguments for the PHP instance. */
  argv?: Array<string>
  /** The document root for the PHP instance. */
  docroot?: string
  /** Throw request errors */
  throwRequestErrors?: boolean
  /** Request rewriter */
  rewriter?: Rewriter
}

/** Options for creating a new PHP request. */
export interface PhpRequestOptions {
  /** The HTTP method for the request. */
  method?: string
  /** The URL for the request. */
  url: string
  /** The headers for the request. */
  headers?: Headers
  /** The body for the request. */
  body?: Uint8Array
  /** The socket information for the request. */
  socket?: PhpRequestSocketOptions
}

export interface PhpRequestSocketOptions {
  /** The string representation of the local IP address the remote client is connecting on. */
  localAddress: string
  /** The numeric representation of the local port. For example, 80 or 21. */
  localPort: number
  /** The string representation of the local IP family, e.g., "IPv4" or "IPv6". */
  localFamily: string
  /** The string representation of the remote IP address. */
  remoteAddress: string
  /** The numeric representation of the remote port. For example, 80 or 21. */
  remotePort: number
  /** The string representation of the remote IP family, e.g., "IPv4" or "IPv6". */
  remoteFamily: string
}

/** Options for creating a new PHP response. */
export interface PhpResponseOptions {
  /** The HTTP status code for the response. */
  status?: number
  /** The headers for the response. */
  headers?: Headers
  /** The body for the response. */
  body?: Uint8Array
  /** The log for the response. */
  log?: Uint8Array
  /** The exception for the response. */
  exception?: string
}

export interface PhpRewriteCondOptions {
  type: string
  args?: Array<string>
}

export interface PhpRewriterOptions {
  type: string
  args: Array<string>
}
