name: CI

env:
  DEBUG: napi:*
  APP_NAME: php
  MACOSX_DEPLOYMENT_TARGET: '10.13'

permissions:
  contents: write
  id-token: write

'on':
  push:
    branches:
      - main
    tags-ignore:
      - '**'
    paths-ignore:
      - '**/*.md'
      - LICENSE
      - '**/*.gitignore'
      - .editorconfig
      - docs/**
  pull_request: null

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-ci
  cancel-in-progress: true

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        settings:
          #
          # macOS
          #

          - host: macos-15
            target: aarch64-apple-darwin
            # build: pnpm build --target aarch64-apple-darwin
            build: pnpm build
            setup: |
              brew install autoconf automake libtool re2c bison libiconv

          # TODO: Do we need to care about x86_64 macOS?
          # NOTE: Unable to force link bison on macOS 13, which php-src requires.
          - host: macos-13
            target: x86_64-apple-darwin
            # build: pnpm build --target x86_64-apple-darwin
            build: pnpm build
            setup: |
              brew install autoconf automake libtool re2c bison libiconv

          #
          # Linux
          #

          - host: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            # docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-debian
            build: pnpm build --target x86_64-unknown-linux-gnu
            setup: |
              sudo apt-get update
              sudo apt-get install -y libssl-dev pkg-config build-essential \
                libcurl4-openssl-dev autoconf libxml2-dev libsqlite3-dev \
                bison re2c libonig-dev

          # TODO: Can't use the musl container, need to build with ssh-agent access.
          # TODO: Fails because missing x86_64-linux-musl-gcc
          # - host: ubuntu-latest
          #   target: x86_64-unknown-linux-musl
          #   # docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-alpine
          #   build: pnpm build --target x86_64-unknown-linux-musl
          #   setup: |
          #     sudo apt-get update
          #     sudo apt-get install -y libssl-dev pkg-config build-essential \
          #       libcurl4-openssl-dev autoconf libxml2-dev libsqlite3-dev \
          #       bison re2c libonig-dev
          #     rustup target add x86_64-unknown-linux-musl

          #
          # Windows
          #

          # - host: windows-latest
          #   target: x86_64-pc-windows-msvc
          #   build: pnpm build --target x86_64-pc-windows-msvc

          # - host: windows-latest
          #   target: aarch64-pc-windows-msvc
          #   build: pnpm build --target aarch64-pc-windows-msvc

          # - host: windows-latest
          #   target: i686-pc-windows-msvc
          #   build: |
          #     pnpm build --target i686-pc-windows-msvc
          #     pnpm test
    name: stable - ${{ matrix.settings.target }} - node@22
    runs-on: ${{ matrix.settings.host }}
    steps:
      - uses: actions/checkout@v4
      - name: setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10
      - name: Setup node
        uses: actions/setup-node@v4
        if: ${{ !matrix.settings.docker }}
        with:
          node-version: 22
          cache: pnpm
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        if: ${{ !matrix.settings.docker }}
        with:
          toolchain: stable
          targets: ${{ matrix.settings.target }}
      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            ~/.napi-rs
            .cargo-cache
            target/
          key: ${{ matrix.settings.target }}-cargo-${{ matrix.settings.host }}
      - uses: goto-bus-stop/setup-zig@v2
        if: ${{ matrix.settings.target == 'armv7-unknown-linux-gnueabihf' || matrix.settings.target == 'armv7-unknown-linux-musleabihf' }}
        with:
          version: 0.13.0
      - name: Setup toolchain
        run: ${{ matrix.settings.setup }}
        if: ${{ (matrix.settings.setup) && (!matrix.settings.docker) }}
        shell: bash
      - name: Checkout php-src
        uses: actions/checkout@v4
        with:
          repository: php/php-src
          path: php-src
      - name: Install dependencies
        run: pnpm install
      - name: Give GitHub Actions access to ext-php-rs
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.SECRET_REPO_DEPLOY_KEY }}
      - name: Fetch cargo dependencies
        run: cargo fetch --target ${{ matrix.settings.target }}
        shell: bash
      - name: Build & Install PHP
        if: ${{ !matrix.settings.docker }}
        shell: bash
        run: |
          # Use brew bison and libiconv manually. Force linking does not work on macOS 13
          if [[ "$(uname)" == "Darwin" ]]; then
            export PATH="$(brew --prefix bison)/bin:$(brew --prefix libiconv)/bin:$PATH"
            export LDFLAGS="$LDFLAGS -L$(brew --prefix bison)/lib -L$(brew --prefix libiconv)/lib"
          fi

          cd php-src
          ./buildconf
          ./configure --enable-shared --enable-embed=shared --enable-zts --without-iconv --with-pdo-mysql=mysqlnd --with-mysqli=mysqlnd --with-openssl --with-curl --enable-mbstring
          make -j$([[ "$(uname)" == "Darwin" ]] && sysctl -n hw.physicalcpu || nproc)
          sudo make install

          EXT=$([[ "$(uname)" == "Darwin" ]] && echo "dylib" || echo "so")
          mkdir -p ../libs/${{ matrix.settings.target }}
          mv libs/libphp.$EXT ../libs/${{ matrix.settings.target }}/libphp.$EXT

          # Copy libs to be accessible by napi.rs build
          cp libs/* ..

          cd ..

          ${{ matrix.settings.build }}
      - name: Build in docker
        uses: addnab/docker-run-action@v3
        if: ${{ matrix.settings.docker }}
        env:
          ID_RSA: ${{ secrets.SECRET_REPO_DEPLOY_KEY }}
        with:
          image: ${{ matrix.settings.docker }}
          options: '--user 0:0 -v ${{ github.workspace }}/.cargo-cache/git/db:/usr/local/cargo/git/db -v ${{ github.workspace }}/.cargo/registry/cache:/usr/local/cargo/registry/cache -v ${{ github.workspace }}/.cargo/registry/index:/usr/local/cargo/registry/index -v ${{ github.workspace }}:/build -w /build'
          run: |
            ${{ matrix.settings.setup }}

            # Build PHP
            cd php-src
            ./buildconf
            ./configure --enable-shared --enable-embed=shared --enable-zts --without-iconv --with-pdo-mysql=mysqlnd --with-mysqli=mysqlnd --with-openssl --with-curl --enable-mbstring
            make -j$([[ "$(uname)" == "Darwin" ]] && sysctl -n hw.physicalcpu || nproc)
            sudo make install

            # Copy libs to be accessible by napi.rs build
            cp libs/* ..

            cd ..

            mkdir -p ~/.ssh
            echo "$ID_RSA" >> ~/.ssh/id_rsa

            corepack disable
            npm i -g pnpm

            ${{ matrix.settings.build }}
      # - name: Fix rpath to libphp dynamic library
      #   shell: bash
      #   run: |
      #     EXT=$([[ "$(uname)" == "Darwin" ]] && echo "dylib" || echo "so")
      #     install_name_tool -change @rpath/libphp.$EXT @loader_path/libphp.$EXT ${{ env.APP_NAME }}.*.node
      - name: Upload *.node artifact
        uses: actions/upload-artifact@v4
        with:
          name: bindings-${{ matrix.settings.target }}
          path: ${{ env.APP_NAME }}.*.node
          if-no-files-found: error
      - name: Upload libphp artifact
        uses: actions/upload-artifact@v4
        with:
          name: libphp-${{ matrix.settings.target }}
          path: php-src/lib/*
          if-no-files-found: error

  test-macOS-windows-binding:
    name: Test bindings on ${{ matrix.settings.target }} - node@${{ matrix.node }}
    needs:
      - build
    strategy:
      fail-fast: false
      matrix:
        settings:
          - host: macos-latest
            target: x86_64-apple-darwin
            architecture: x64
          - host: macos-latest
            target: aarch64-apple-darwin
            architecture: arm64
          # - host: windows-latest
          #   target: x86_64-pc-windows-msvc
          #   architecture: x64
        node:
          - '20'
          - '22'
    runs-on: ${{ matrix.settings.host }}
    steps:
      - uses: actions/checkout@v4
      - name: setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: pnpm
          architecture: ${{ matrix.settings.architecture }}
      - name: Install dependencies
        run: pnpm install
      - name: Download *.node artifacts
        uses: actions/download-artifact@v4
        with:
          name: bindings-${{ matrix.settings.target }}
          path: .
      - name: Download libphp artifacts
        uses: actions/download-artifact@v4
        with:
          name: libphp-${{ matrix.settings.target }}
          path: .
      - name: List packages
        run: ls -R .
        shell: bash
      - name: Test bindings
        run: pnpm test

  test-linux-binding:
    name: Test bindings on ${{ matrix.target }} - node@${{ matrix.node }}
    needs:
      - build
    strategy:
      fail-fast: false
      matrix:
        target:
          - x86_64-unknown-linux-gnu
          # - x86_64-unknown-linux-musl
          # Not supported yet. Need ubuntu-24.04-arm runner
          # - aarch64-unknown-linux-gnu
          # - aarch64-unknown-linux-musl
        node:
          - '20'
          - '22'
    runs-on: ${{ contains(matrix.target, 'aarch64') && 'ubuntu-24.04-arm' || 'ubuntu-latest' }}
    steps:
      - uses: actions/checkout@v4
      - name: setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: pnpm
      - name: Output docker params
        id: docker
        run: |
          node -e "
            if ('${{ matrix.target }}'.startsWith('aarch64')) {
              console.log('PLATFORM=linux/arm64')
            } else if ('${{ matrix.target }}'.startsWith('armv7')) {
              console.log('PLATFORM=linux/arm/v7')
            } else {
              console.log('PLATFORM=linux/amd64')
            }
          " >> $GITHUB_OUTPUT
          node -e "
            if ('${{ matrix.target }}'.endsWith('-musl')) {
              console.log('IMAGE=node:${{ matrix.node }}-alpine')
            } else {
              console.log('IMAGE=node:${{ matrix.node }}-slim')
            }
          " >> $GITHUB_OUTPUT
          echo "PNPM_STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_OUTPUT
      - name: Install dependencies
        run: pnpm install --force
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: bindings-${{ matrix.target }}
          path: .
      - name: List packages
        run: ls -R .
        shell: bash
      - name: Test bindings
        uses: addnab/docker-run-action@v3
        with:
          image: ${{ steps.docker.outputs.IMAGE }}
          options: -v ${{ steps.docker.outputs.PNPM_STORE_PATH }}:${{ steps.docker.outputs.PNPM_STORE_PATH }} -v ${{ github.workspace }}:${{ github.workspace }} -w ${{ github.workspace }} --platform ${{ steps.docker.outputs.PLATFORM }}
          run: npm run test

  universal-macOS:
    name: Build universal macOS binary
    needs:
      - build
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      - name: setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: pnpm
      - name: Install dependencies
        run: pnpm install
      - name: Download macOS x64 artifact
        uses: actions/download-artifact@v4
        with:
          name: bindings-x86_64-apple-darwin
          path: artifacts
      - name: Download macOS arm64 artifact
        uses: actions/download-artifact@v4
        with:
          name: bindings-aarch64-apple-darwin
          path: artifacts
      - name: Combine binaries
        run: pnpm universal
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: bindings-universal-apple-darwin
          path: ${{ env.APP_NAME }}.*.node
          if-no-files-found: error

  # publish:
  #   name: Publish
  #   runs-on: ubuntu-latest
  #   needs:
  #     - lint
  #     - test-linux-binding
  #     - test-macOS-windows-binding
  #     - universal-macOS
  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: setup pnpm
  #       uses: pnpm/action-setup@v4
  #       with:
  #         version: 10
  #     - name: Setup node
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: 22
  #         cache: pnpm
  #     - name: Install dependencies
  #       run: pnpm install
  #     - name: Download all artifacts
  #       uses: actions/download-artifact@v4
  #       with:
  #         path: artifacts
  #     - name: create npm dirs
  #       run: pnpm napi create-npm-dirs
  #     - name: Move artifacts
  #       run: pnpm artifacts
  #     - name: List packages
  #       run: ls -R ./npm
  #       shell: bash
  #     - name: Publish
  #       run: |
  #         npm config set provenance true
  #         if git log -1 --pretty=%B | grep "^[0-9]\+\.[0-9]\+\.[0-9]\+$";
  #         then
  #           echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
  #           npm publish --access public
  #         elif git log -1 --pretty=%B | grep "^[0-9]\+\.[0-9]\+\.[0-9]\+";
  #         then
  #           echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
  #           npm publish --tag next --access public
  #         else
  #           echo "Not a release, skipping publish"
  #         fi
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #         NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
